https://leetcode.com/problems/course-schedule-ii/

class Solution {
public:
    bool DFS(vector<vector<int>>& graph, int i, vector<int>& used, vector<int>& v){
        
        if (used[i] == 1)
            return true;
        
        if (used[i] == -1)
            return false;
        used[i] = -1;
        for (auto j : graph[i]) {
            if(!DFS(graph, j, used, v))
                return false;
        }
        used[i] = 1;
        v.push_back(i);
        return true;
    }
    
      vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses); 
        vector<int> used(numCourses);
        vector<int> result;
        for (auto p : prerequisites)
            graph[p[1]].push_back(p[0]);
        
        for (int i = 0; i < numCourses; ++i) {
            if (!DFS(graph, i, used, result))
                return {};
        }
        reverse(result.begin(), result.end());
        return result;
    }
    
};
