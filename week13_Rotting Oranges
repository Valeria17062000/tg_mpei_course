https://leetcode.com/problems/rotting-oranges/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
         vector<pair<int, int>> move = {{1,0}, {-1,0}, {0,1}, {0,-1}};
    
        queue<pair<int, int>> q;
        int fresh = 0;
        
        for (int i = 0; i < grid.size(); i++){
            for (int j = 0; j < grid[i].size(); j++){
                if (grid[i][j] == 1)
                    fresh++;
                else if (grid[i][j] == 2)
                    q.push({i, j});
            }
        }
        
        int minutes = 0;
        while (!q.empty()){
            minutes++;
            
            int size = q.size();
            for (int i = 0; i < size; i++){
                pair<int, int> cur = q.front();
                q.pop();
                
                for (auto m : move){
                    int x = cur.first + m.first;
					int y = cur.second + m.second;
					if (x > -1 && y > -1 && x < grid.size() && y < grid[0].size() && grid[x][y] == 1)
					{
                        fresh--;
						grid[x][y] = 2;
						q.push({x,y});
						
					}
                    
                }
            }
        }
        if (fresh)
            return -1;
        else if (minutes>0)
            return minutes -1;
        else return 0;
      
    }
};
