https://leetcode.com/problems/shortest-path-with-alternating-colors/

class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
         vector<vector<pair<int, int>>> g(n);
        for(auto e : red_edges)  g[e[0]].push_back({e[1], 0});
        for(auto e : blue_edges)  g[e[0]].push_back({e[1], 1});

        vector<vector<bool>> used(n, vector(2, false));
        queue<pair<int, int>> q;
        vector<int> res(n, -1);

        q.push({0, -1});
        int length = 0;
        while(!q.empty()){
            int s = q.size();
            for(int i = 0; i < s; ++i){
                auto cur = q.front(); 
                q.pop();
                if(res[cur.first] == -1) 
                    res[cur.first] = length;
                for(auto n : g[cur.first]){
                    if(n.second != cur.second && !used[n.first][n.second]){
                        used[n.first][n.second] = true;
                        q.push(n);
                    }
                }
            }
            length++;
        }
        return res;
    }
};
